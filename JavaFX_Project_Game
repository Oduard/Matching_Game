import javafx.application.Application;
import javafx.scene.control.Label;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.geometry.*;
import javafx.scene.*;
import javafx.scene.control.Button;
import javafx.scene.image.*;
import javafx.scene.layout.*;
import javafx.animation.*;
import javafx.util.*;
import javafx.scene.media.*;
import java.io.*;
import java.util.*;


public class JavaFX_Project_Memory_Game extends Application {
    private int clickTracker = 1;
    private int counter = 0;
    private Object source = new Object();
    private String[] cardType = {"apple", "bananas", "cherries", "grapes", "lime", "orange", "peach", "pear", "pineapple", "strawberry"};
    private List<Card> deck = new ArrayList<>();
    private int score = 0;
    private Label displayScore = new Label("Score: " + score);

    private BorderPane getPane() {

        // Pane creation
        BorderPane pane = new BorderPane();
        Pane paneForText = new Pane();
        VBox info = new VBox(10);
        HBox paneForButtons = new HBox(20);
        VBox home = new VBox(20);
        HBox author = new HBox(20);
        VBox videoPane = new VBox(20);
        HBox videoButtons = new HBox(20);
        VBox authorDetails = new VBox(20);
        Game memory = new Game();

        //Positions on Border pane
        pane.setAlignment(paneForButtons, Pos.CENTER);
        pane.setMargin(paneForButtons, new Insets(15, 10, 15, 10));
        pane.setTop(paneForButtons);
        pane.setMargin(home, new Insets(200, 200, 200, 500));
        pane.setCenter(home);
        pane.setMargin(author, new Insets(50, 200, 200, 50));
        pane.setCenter(author);
        pane.setBottom(paneForText);

        // Author pane

        // Author Video
        Media video = new Media(new File("src/video/video.mp4").toURI().toString());
        MediaPlayer player = new MediaPlayer(video);
        player.setAutoPlay(false);
        MediaView view = new MediaView(player);
        Button btPlay = new Button("Play", new ImageView("image/play.png"));
        Button btPause = new Button("Pause", new ImageView("image/pause.png"));
        videoButtons.getChildren().addAll(btPlay, btPause);
        videoPane.getChildren().addAll(view, videoButtons);

        // Home pane
        home.setPadding(new Insets(50, 100, 50, 100));
        Label welcome = new Label ("Welcome!");
        welcome.setFont(Font.font(36));
        Label course = new Label("Class: CS 1302\n" +
                "Section: 09\n" +
                "Professor: Cepeda Mora, Carlos\n" +
                "Name: Eduardo Arguello\n" +
                "Assignment: JavaFX Proyect");
        course.setFont(Font.font(18));
        home.getChildren().addAll(welcome, course);

        // Author Info
        author.setPadding(new Insets(10, 100, 50, 100));
        ImageView photo = new ImageView(new Image("image/photo.jpg"));
        photo.setFitWidth(100);
        photo.setPreserveRatio(true);
        photo.setSmooth(true);
        photo.setCache(true);
        Label name = new Label("Eduardo Arguello");
        name.setFont(Font.font(36));
        Label authorInfo = new Label("Education status: Freshman\n" +
                "Hobbies: Traveling\n");
        authorInfo.setFont(Font.font(18));
        authorDetails.getChildren().addAll(photo, name, authorInfo);

        author.getChildren().addAll(videoPane,  authorDetails);

        // Game Info Pane
        Button reset_PlayAgain = new Button("Reset / Play Again", new ImageView("image/reset.png"));
        reset_PlayAgain.setFont(Font.font(24));
        Label gameName = new Label("Memory Game");
        gameName.setFont(Font.font(36));
        Label gameInfo = new Label( "The object of the game is to turn over pairs of matching cards.\n" +
                "In turn, player chooses two cards and turns them face up.\n" +
                "If they are of the same then the player wins the pair and plays again.\n" +
                "If they are not of the same, they are turned face down again.\n" +
                "The game ends when the last pair has been picked up.");
        gameInfo.setFont(Font.font(18));
        displayScore.setFont(Font.font(24));
        info.getChildren().addAll(gameName, gameInfo, displayScore, reset_PlayAgain);
        info.setAlignment(Pos.CENTER);
        info.setPadding(new Insets(50, 100, 50, 100)); // Bind

        // Buttons block
        Button btHome = new Button("Home", new ImageView("image/home.png"));
        Button btAuthor1 = new Button("Author1", new ImageView("image/author1.png"));
        Button btAuthor2 = new Button("Author2", new ImageView("image/author2.png"));
        Button btGame = new Button("Game", new ImageView("image/game.png"));

        paneForButtons.getChildren().addAll(btHome, btAuthor1, btAuthor2, btGame);
        paneForButtons.setAlignment(Pos.CENTER);

        //Buttons actions
        btHome.setOnAction(e -> {
            pane.setLeft(null);
            pane.setCenter(home);
            pane.setRight(null);
        });

        btAuthor1.setOnAction(event -> {
            pane.setLeft(null);
            pane.setCenter(author);
            pane.setRight(null);
        });

        btAuthor2.setOnAction(event -> {
            pane.setLeft(null);
            pane.setCenter(null);
            pane.setRight(null);
        });

        btGame.setOnAction(e -> {
            pane.setCenter(memory);
            pane.setRight(info);
        });

        reset_PlayAgain.setOnAction(e -> memory.reset());

        btPlay.setOnAction(event -> player.play());

        btPause.setOnAction(event -> player.pause());

        pane.setCenter(home);

        return pane;
    }

    public class Game extends GridPane{
        Game() {
            this.setAlignment(Pos.CENTER);
            this.setPadding(new Insets(12, 13, 12, 13));
            this.setHgap(10);
            this.setVgap(10);

            // Loop to add 10 pairs to ArrayList 'deck'
            for(int i = 0; i < 10; i++){
                for(int j = i * 2; j <= (i * 2) +1; j++){
                    deck.add(j, new Card(cardType[i]));
                }
            }
            shuffleDeck();
            setCards();
        }

        private void shuffleDeck() {
            // Shuffles the deck
            Collections.shuffle(deck);
        }

        private void setCards() {
            // Loop to set cards from deck to grid
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < 5; j++) {
                    this.add(deck.get(counter), j, i);
                    counter++;
                }
            }
            counter = 0;
        }

        private void reset(){
            // Iterates through the deck resetting card values
            this.getChildren().clear();
            for (Card aDeck : deck) {
                aDeck.reset();
            }
            this.shuffleDeck();
            this.setCards();
            score = 0;
            clickTracker = 1;
            displayScore.setText("Score: " + score);
        }

    }

        public class Card extends javafx.scene.layout.StackPane implements Comparable {
        private final String NAME;
        private int clickable = 1;
        private ImageView back = new ImageView(new Image("image/back.gif"));
        private ImageView front = new ImageView();
        private Image frontImage;

        Card(String path){
            NAME = path;
            back.setFitWidth(100);
            back.setPreserveRatio(true);
            back.setSmooth(true);
            back.setCache(true);
            frontImage = new Image ("image/" + path + ".png");
            front.setImage(frontImage);
            front.setFitWidth(90);
            front.setFitHeight(130);
            front.setPreserveRatio(true);
            front.setSmooth(true);
            front.setCache(true);
            this.getChildren().addAll(front, back);
            fade(this.front, 1.0, 0);
            this.setOnMouseClicked(
                    e -> click(e.getSource()));

        }

        private ImageView getBackImageView(){
            return this.back;
        }

        private ImageView getFrontImageView(){
            return this.front;
        }

        private String getName(){
            return this.NAME;
        }

        private void setClickable(int a) {
            this.clickable = a;
        }

        private void reset(){
            this.clickable = 1;
            fade(this.back, 1, 1);
        }

        void click(Object ob){
            // Implementation of click action
            if(clickable == 1) {
                if (clickTracker == 1) {
                    flip(back, front, 1.0, 0);
                    clickTracker++;
                    clickable = 0;
                    source = ob;
                }
                else {
                    clickTracker = 1;
                    Card myCard = ((Card) source);
                    flip(back, front, 1.0, 0);

                    if (this.compareTo(myCard) == 1) {
                        this.clickable = 0;
                        myCard.setClickable(0);
                        score = score + 10;
                        Timeline delay = new Timeline(new KeyFrame(Duration.millis(2000), event -> displayScore.setText("Score: " + score)));
                        delay.setCycleCount(1);
                        delay.play();
                    } else {
                        myCard.setClickable(1);
                        flip(myCard.getBackImageView(),myCard.getFrontImageView(), 0, 1.0);
                        flip(back, front, 0, 1.0);
                    }
                }
            }
        }

        void fade(ImageView imView, double to, double from){
            // Method to add fade animation
            FadeTransition ft = new FadeTransition(Duration.millis(1000), imView);
            ft.setFromValue(from);
            ft.setToValue(to);
            ft.setCycleCount(1);
            ft.setAutoReverse(false);
            ft.play();
        }

        void scale(ImageView imView, double to, double from){
            // Method to add horizontal scale animation
            ScaleTransition st = new ScaleTransition(Duration.millis(1000), imView);
            st.setFromX(from);
            st.setToX(to);
            st.setCycleCount(1);
            st.play();
        }

        void flip(ImageView imView1, ImageView imView2, double to, double from){
            // This method calls both fade and scale animation to create a flip effect
            Timeline tl = new Timeline(new KeyFrame(Duration.millis(1000), event -> {
                fade(imView1, from, to);
                scale(imView1, from, to);
            }), new KeyFrame(Duration.millis(1000), event -> {
                fade(imView2, to, from);
                scale(imView2, to, from);
            }));
            tl.setCycleCount(1);
            tl.play();
        }

        @Override
        public int compareTo(Object obj){
            if (obj instanceof Card) {
                Card card = (Card) obj;
                if (this.NAME.equals(card.getName()))
                    return 1;
                else
                    return -1;
            }
            return 0;
        }
    }

    @Override // Override the start method in the Application class
    public void start(Stage primaryStage) {

        // Create a scene and place it in the stage
        Scene scene = new Scene(getPane());
        primaryStage.setTitle("Memory Game"); // Set the stage title
        primaryStage.setScene(scene); // Place the scene in the stage
        primaryStage.show(); // Display the stage
        primaryStage.setFullScreen(true);
    }

    /**
     * The main method is only needed for the IDE with limited
     * JavaFX support. Not needed for running from the command line.
     */

    public static void main(String[] args) {
        launch(args);

    }
}
